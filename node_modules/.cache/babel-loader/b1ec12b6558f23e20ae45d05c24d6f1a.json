{"ast":null,"code":"var _jsxFileName = \"/Users/Randy/Desktop/flixify/src/components/TVDetails.js\";\nimport React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport noImage from \"../noImage.png\";\nimport { Col, Row, ListGroup, ButtonToolbar, Button, Container, Card } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport YoutubeModal from \"./YoutubeModal\";\nimport CastList from \"./CastList\";\nimport { SliderSettings } from \"./MovieLists/SliderSettings\";\nconst apiKey = \"170638d59cd41f58852a2f12564d2503\";\nexport class Details extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getTvDetails = async api => {\n      const _this$props$match$par = this.props.match.params,\n            id = _this$props$match$par.id,\n            type = _this$props$match$par.type;\n      const res = await axios.get(\"https://api.themoviedb.org/3/\".concat(type, \"/\").concat(id, \"?api_key=\").concat(api));\n      this.setState({\n        details: res.data,\n        genres: res.data.genres.map(cur => cur.name)\n      });\n    };\n\n    this.getMovieCast = async api => {\n      const _this$props$match$par2 = this.props.match.params,\n            id = _this$props$match$par2.id,\n            type = _this$props$match$par2.type;\n      const res = await axios.get(\"https://api.themoviedb.org/3/\".concat(type, \"/\").concat(id, \"/credits?api_key=\").concat(api));\n      this.setState({\n        cast: res.data.cast.slice(0, 5)\n      });\n    };\n\n    this.getTvTrailer = async api => {\n      const _this$props$match$par3 = this.props.match.params,\n            id = _this$props$match$par3.id,\n            type = _this$props$match$par3.type;\n      const res = await axios.get(\"https://api.themoviedb.org/3/\".concat(type, \"/\").concat(id, \"/videos?api_key=\").concat(apiKey, \"&language=en-US\"));\n      res.data.results.length >= 1 ? this.setState({\n        trailer: res.data.results[0].key\n      }) : this.setState({\n        trailer: \"noid\"\n      });\n    };\n\n    this.getSimilar = async api => {\n      const _this$props$match$par4 = this.props.match.params,\n            id = _this$props$match$par4.id,\n            type = _this$props$match$par4.type;\n      const res = await axios.get(\"https://api.themoviedb.org/3/\".concat(type, \"/\").concat(id, \"/similar?api_key=\").concat(api, \"&language=en-US&page=1\"));\n      this.setState({\n        similar: res.data.results\n      });\n    };\n\n    this.modalClose = () => {\n      this.setState({\n        modalShow: false\n      });\n    };\n\n    this.state = {\n      details: {},\n      similar: [],\n      genres: [],\n      trailer: \"\",\n      cast: [],\n      modalShow: false\n    };\n  }\n\n  componentDidMount() {\n    this.getTvDetails(apiKey);\n    this.getTvTrailer(apiKey);\n    this.getMovieCast(apiKey);\n    this.getSimilar(apiKey);\n  }\n\n  render() {\n    const _this$state = this.state,\n          details = _this$state.details,\n          trailer = _this$state.trailer,\n          genres = _this$state.genres,\n          modalShow = _this$state.modalShow,\n          cast = _this$state.cast,\n          similar = _this$state.similar;\n    const fullYear = String(details.first_air_date).slice(0, 4);\n    return React.createElement(\"div\", {\n      className: \"banner-gradient-details  text-light \",\n      style: {\n        backgroundImage: \"linear-gradient(rgba(0,0,53,0.7),rgba(0,0,53,0.7)),url(http://image.tmdb.org/t/p/original/\".concat(details.backdrop_path, \")\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"  align-items-center justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Col, {\n      className: \"text-center py-4\",\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \" \", React.createElement(\"img\", {\n      className: \"rounded\",\n      alt: \"\",\n      width: \"225\",\n      src: details.poster_path ? \"http://image.tmdb.org/t/p/original/\".concat(details.poster_path) : noImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Col, {\n      className: \"py-4\",\n      lg: 8,\n      xs: 11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, details.name, \" \", React.createElement(\"span\", {\n      className: \"text-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"(\", fullYear, \")\")), genres.map((cur, i) => React.createElement(ListGroup.Item, {\n      key: i,\n      className: \"d-inline-block  p-2 m-2 rounded\",\n      variant: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, cur)), trailer === \"noid\" ? null : React.createElement(ButtonToolbar, {\n      className: \"d-inline-block m-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"warning\",\n      onClick: () => this.setState({\n        modalShow: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-play-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), \" Trailer\"), React.createElement(YoutubeModal, {\n      show: modalShow,\n      onHide: this.modalClose,\n      trailer: trailer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"hr\", {\n      className: \"mx-0\",\n      style: {\n        border: \"1px white solid\",\n        width: \"250px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"p-2 bg-light text-dark rounded\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, details.overview))), React.createElement(\"h1\", {\n      className: \" pt-5 text-white text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Top Cast Members\"), React.createElement(CastList, {\n      cast: cast,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Slider, Object.assign({}, SliderSettings, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \" pt-5 text-white text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Recommendations\"), similar.map(cur => {\n      return cur.backdrop_path ? React.createElement(Card, {\n        key: cur.id,\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: cur.poster_path ? \"http://image.tmdb.org/t/p/original/\".concat(cur.poster_path) : noImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(\"a\", {\n        href: \"/tvdetails/tv/\".concat(cur.id, \"/\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: {\n          position: \"absolute\",\n          top: \"30%\",\n          left: \"35%\",\n          right: \"35%\"\n        },\n        variant: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-info-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }))), React.createElement(Card.Title, {\n        className: \"pt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, cur.title ? cur.title : cur.name), React.createElement(\"hr\", {\n        className: \"mx-0\",\n        style: {\n          border: \"1px white solid\",\n          width: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), cur.vote_average > 0 ? React.createElement(Card.Text, {\n        className: \"my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"TMDB Rating \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"i\", {\n        className: \"fas fa-star\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), \" \", \" \", cur.vote_average, \" / 10\") : React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"No ratings \", React.createElement(\"i\", {\n        class: \"fas fa-frown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }))) : null;\n    }))));\n  }\n\n}\nexport default Details;","map":{"version":3,"sources":["/Users/Randy/Desktop/flixify/src/components/TVDetails.js"],"names":["React","Component","Slider","noImage","Col","Row","ListGroup","ButtonToolbar","Button","Container","Card","axios","YoutubeModal","CastList","SliderSettings","apiKey","Details","constructor","props","getTvDetails","api","match","params","id","type","res","get","setState","details","data","genres","map","cur","name","getMovieCast","cast","slice","getTvTrailer","results","length","trailer","key","getSimilar","similar","modalClose","modalShow","state","componentDidMount","render","fullYear","String","first_air_date","backgroundImage","backdrop_path","poster_path","i","border","width","overview","position","top","left","right","title","vote_average"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport noImage from \"../noImage.png\";\nimport {\n  Col,\n  Row,\n  ListGroup,\n  ButtonToolbar,\n  Button,\n  Container,\n  Card\n} from \"react-bootstrap\";\n\nimport axios from \"axios\";\nimport YoutubeModal from \"./YoutubeModal\";\nimport CastList from \"./CastList\";\nimport { SliderSettings } from \"./MovieLists/SliderSettings\";\n\nconst apiKey = \"170638d59cd41f58852a2f12564d2503\";\nexport class Details extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      details: {},\n      similar: [],\n      genres: [],\n      trailer: \"\",\n      cast: [],\n      modalShow: false\n    };\n  }\n\n  getTvDetails = async api => {\n    const { id, type } = this.props.match.params;\n    const res = await axios.get(\n      `https://api.themoviedb.org/3/${type}/${id}?api_key=${api}`\n    );\n\n    this.setState({\n      details: res.data,\n      genres: res.data.genres.map(cur => cur.name)\n    });\n  };\n  getMovieCast = async api => {\n    const { id, type } = this.props.match.params;\n    const res = await axios.get(\n      `https://api.themoviedb.org/3/${type}/${id}/credits?api_key=${api}`\n    );\n    this.setState({ cast: res.data.cast.slice(0, 5) });\n  };\n  getTvTrailer = async api => {\n    const { id, type } = this.props.match.params;\n    const res = await axios.get(\n      `https://api.themoviedb.org/3/${type}/${id}/videos?api_key=${apiKey}&language=en-US`\n    );\n\n    res.data.results.length >= 1\n      ? this.setState({ trailer: res.data.results[0].key })\n      : this.setState({ trailer: \"noid\" });\n  };\n\n  getSimilar = async api => {\n    const { id, type } = this.props.match.params;\n    const res = await axios.get(\n      `https://api.themoviedb.org/3/${type}/${id}/similar?api_key=${api}&language=en-US&page=1`\n    );\n\n    this.setState({\n      similar: res.data.results\n    });\n  };\n\n  modalClose = () => {\n    this.setState({ modalShow: false });\n  };\n\n  componentDidMount() {\n    this.getTvDetails(apiKey);\n    this.getTvTrailer(apiKey);\n    this.getMovieCast(apiKey);\n    this.getSimilar(apiKey);\n  }\n  render() {\n    const { details, trailer, genres, modalShow, cast, similar } = this.state;\n    const fullYear = String(details.first_air_date).slice(0, 4);\n\n    return (\n      <div\n        className=\"banner-gradient-details  text-light \"\n        style={{\n          backgroundImage: `linear-gradient(rgba(0,0,53,0.7),rgba(0,0,53,0.7)),url(http://image.tmdb.org/t/p/original/${\n            details.backdrop_path\n          })`\n        }}\n      >\n        <Container>\n          <Row className=\"  align-items-center justify-content-center\">\n            <Col className=\"text-center py-4\" md={3}>\n              {\" \"}\n              <img\n                className=\"rounded\"\n                alt=\"\"\n                width=\"225\"\n                src={\n                  details.poster_path\n                    ? `http://image.tmdb.org/t/p/original/${\n                        details.poster_path\n                      }`\n                    : noImage\n                }\n              />\n            </Col>\n            <Col className=\"py-4\" lg={8} xs={11}>\n              <h1>\n                {details.name}{\" \"}\n                <span className=\"text-warning\">({fullYear})</span>\n              </h1>\n\n              {genres.map((cur, i) => (\n                <ListGroup.Item\n                  key={i}\n                  className=\"d-inline-block  p-2 m-2 rounded\"\n                  variant=\"warning\"\n                >\n                  {cur}\n                </ListGroup.Item>\n              ))}\n\n              {trailer === \"noid\" ? null : (\n                <ButtonToolbar className=\"d-inline-block m-1\">\n                  <Button\n                    variant=\"warning\"\n                    onClick={() => this.setState({ modalShow: true })}\n                  >\n                    <i className=\"fas fa-play-circle\" /> Trailer\n                  </Button>\n\n                  <YoutubeModal\n                    show={modalShow}\n                    onHide={this.modalClose}\n                    trailer={trailer}\n                  />\n                </ButtonToolbar>\n              )}\n\n              <hr\n                className=\"mx-0\"\n                style={{\n                  border: \"1px white solid\",\n                  width: \"250px\"\n                }}\n              />\n              <p className=\"p-2 bg-light text-dark rounded\">\n                {details.overview}\n              </p>\n            </Col>\n          </Row>\n          <h1 className=\" pt-5 text-white text-center\">Top Cast Members</h1>\n\n          <CastList cast={cast} />\n          <Slider {...SliderSettings}>\n            <h1 className=\" pt-5 text-white text-center\">Recommendations</h1>\n            {similar.map(cur => {\n              return cur.backdrop_path ? (\n                <Card key={cur.id} className=\"text-white\">\n                  <Card.Img\n                    variant=\"top\"\n                    src={\n                      cur.poster_path\n                        ? `http://image.tmdb.org/t/p/original/${\n                            cur.poster_path\n                          }`\n                        : noImage\n                    }\n                  />\n                  <a href={`/tvdetails/tv/${cur.id}/`}>\n                    <Button\n                      style={{\n                        position: \"absolute\",\n                        top: \"30%\",\n                        left: \"35%\",\n                        right: \"35%\"\n                      }}\n                      variant=\"warning\"\n                    >\n                      <i className=\"fas fa-info-circle\" />\n                    </Button>\n                  </a>\n\n                  <Card.Title className=\"pt-3\">\n                    {cur.title ? cur.title : cur.name}\n                  </Card.Title>\n                  <hr\n                    className=\"mx-0\"\n                    style={{\n                      border: \"1px white solid\",\n                      width: \"50px\"\n                    }}\n                  />\n\n                  {cur.vote_average > 0 ? (\n                    <Card.Text className=\"my-3\">\n                      TMDB Rating <br />\n                      <i className=\"fas fa-star\" /> {` `}\n                      {cur.vote_average} / 10\n                    </Card.Text>\n                  ) : (\n                    <Card.Text>\n                      No ratings <i class=\"fas fa-frown\" />\n                    </Card.Text>\n                  )}\n                </Card>\n              ) : null;\n            })}\n          </Slider>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Details;\n"]},"metadata":{},"sourceType":"module"}